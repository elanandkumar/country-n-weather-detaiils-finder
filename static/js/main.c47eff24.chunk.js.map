{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["COUNTRY_API","WEATHER_API","App","React","useState","countries","setCountries","searchTerm","setSearchTerm","isLoading","setIsLoading","country","weather","selectedCountry","setSelectedCountry","countriesToShow","filter","name","toLowerCase","includes","useEffect","axios","get","then","response","data","getWeatherForCountry","current","catch","err","console","error","renderLoader","class","className","role","type","value","onChange","event","target","capital","population","languages","map","language","width","height","src","flag","alt","temperature","weather_icons","wind_speed","wind_dir","renderCountry","countriesLength","length","onClick","showCountryDetailsHandler","renderCountries","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c47eff24.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst ACCESS_KEY = \"c1982046f9103655b99b8587bba2d55b\";\nconst COUNTRY_API = \"https://restcountries.eu/rest/v2/all\";\nconst WEATHER_API = `http://api.weatherstack.com/current?access_key=${ACCESS_KEY}&query=`;\n\nfunction App() {\n  const [countries, setCountries] = React.useState([]);\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [selectedCountry, setSelectedCountry] = React.useState({\n    country: null,\n    weather: null\n  });\n\n  const countriesToShow = countries.filter(country =>\n    country.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n  React.useEffect(() => {\n    axios.get(COUNTRY_API).then(response => setCountries(response.data));\n  }, []);\n\n  const handleSearchTermChange = event => {\n    setSelectedCountry({ country: null, weather: null });\n    let searchTerm = event.target.value;\n    setSearchTerm(searchTerm);\n  };\n\n  const renderCountry = () => {\n    const { country, weather } = selectedCountry;\n    return (\n      <div className=\"country-details\">\n        <div className=\"country-info\">\n          <h3>{country.name}</h3>\n          <div>\n            <strong>Capital:</strong> {country.capital}\n          </div>\n          <div>\n            <strong>Population:</strong> {country.population}\n          </div>\n          <h4>Languages</h4>\n          <ul>\n            {country.languages.map(language => (\n              <li>{language.name}</li>\n            ))}\n          </ul>\n          <img width=\"100\" height=\"auto\" src={country.flag} alt=\"flag\" />\n        </div>\n        {weather && (\n          <div className=\"weather-info\">\n            <h4>Weather in {country.name}</h4>\n            <div>\n              <strong>Temperature:</strong>{\" \"}\n              {`${weather && weather.temperature} Celsius`}\n            </div>\n            <img src={weather && weather.weather_icons[0]} alt=\"weather icon\" />\n            <div>\n              <strong>Wind:</strong>{\" \"}\n              {`${weather && weather.wind_speed}kph | direction: ${weather &&\n                weather.wind_dir}`}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const getWeatherForCountry = (country = selectedCountry) =>\n    axios\n      .get(`${WEATHER_API}${country.name}`)\n      .then(response => response.data && response.data.current)\n      .catch(err => console.error(err));\n\n  const showCountryDetailsHandler = country => {\n    if (country) {\n      setIsLoading(true);\n      getWeatherForCountry(country).then(weather => {\n        setSelectedCountry({\n          country,\n          weather\n        });\n        setIsLoading(false);\n      });\n    }\n    return;\n  };\n\n  const renderLoader = () => (\n    <div class=\"lds-ripple\">\n      <div></div>\n      <div></div>\n    </div>\n  );\n\n  const renderCountries = () => {\n    const countriesLength = countriesToShow.length;\n    if (searchTerm && countriesLength >= 10) {\n      return <div>Too many matches, specify another filter</div>;\n    }\n    if (countriesLength === 1) {\n      getWeatherForCountry(countriesToShow[0]).then(weather => {\n        setSelectedCountry({ country: countriesToShow[0], weather });\n        setIsLoading(false);\n      });\n      return renderLoader();\n    }\n    if (countriesLength > 1 && countriesLength <= 10) {\n      return countriesToShow.map(country => (\n        <div>\n          <span>{country.name}</span>\n          <span>\n            <button onClick={() => showCountryDetailsHandler(country)}>\n              Show\n            </button>\n          </span>\n        </div>\n      ));\n    }\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Country details finder</h1>\n      </header>\n      <div role=\"main\">\n        <div>\n          <span>Find countries: </span>\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={handleSearchTermChange}\n          />\n        </div>\n        {isLoading && renderLoader()}\n        {!isLoading &&\n          (selectedCountry.country ? renderCountry() : renderCountries())}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}